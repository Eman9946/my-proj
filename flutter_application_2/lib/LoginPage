class LoginPage extends StatelessWidget {
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Login Page'),
      ),
      body: BlocConsumer<AuthCubit, AuthState>(
        listener: (context, state) {
          if (state is AuthError) {
            // Handle authentication errors (display error message, etc.)
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text(state.errorMessage),
                backgroundColor: Colors.red,
              ),
            );
          }
        },
        builder: (context, state) {
          if (state is AuthUnauthenticated) {
            return buildLoginForm(context);
          } else if (state is AuthAuthenticated) {
            // Navigate to the home page or another authenticated screen
            return HomeScreen(user: state.user);
          } else {
            // Loading state or other states
            return Center(
              child: CircularProgressIndicator(),
            );
          }
        },
      ),
    );
  }

  Widget buildLoginForm(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          TextField(
            controller: emailController,
            decoration: InputDecoration(
              labelText: 'Email',
            ),
          ),
          SizedBox(height: 16.0),
          TextField(
            controller: passwordController,
            obscureText: true,
            decoration: InputDecoration(
              labelText: 'Password',
            ),
          ),
          SizedBox(height: 24.0),
          ElevatedButton(
            onPressed: () {
              // Trigger the sign-in process using the cubit
              context.read<AuthCubit>().signInWithEmailAndPassword(
                    emailController.text,
                    passwordController.text,
                  );
            },
            child: Text('Login'),
          ),
        ],
      ),
    );
  }
}